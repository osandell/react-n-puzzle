{"version":3,"sources":["components/Board/Tile/Tile.tsx","components/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","width","height","margin","background","Tile","value","classes","Button","className","display","flexDirection","Board","boardConfig","rows","i","length","row","rowTiles","j","push","Box","data-testid","justifyContent","alignItems","minWidth","padding","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNASMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,WAAY,cAWHC,EANS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MACnBC,EAAUX,IAEhB,OAAO,cAACY,EAAA,EAAD,CAAQC,UAAWF,EAAQP,KAA3B,SAAkCM,KCfrCV,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJU,QAAS,OACTC,cAAe,SACfP,WAAY,eAoCHQ,EA/BG,WAahB,IAZA,IAAML,EAAUX,IAGZiB,EAAc,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,IAGFC,EAAO,GAGFC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAI3C,IAHA,IAAME,EAAMJ,EAAYE,GAEpBG,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAID,OAAQG,IAC9BD,EAASE,KAAK,cAAC,EAAD,CAAcd,MAAOW,EAAIE,IAAdA,IAG3BL,EAAKM,KAAK,cAACC,EAAA,EAAD,UAAcH,GAAJH,IAGtB,OACE,cAACM,EAAA,EAAD,CAAKC,cAAY,QAAQb,UAAWF,EAAQP,KAA5C,SACGc,KCpCDlB,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJU,QAAS,OACTa,eAAgB,SAChBC,WAAY,SACZC,SAAU,IACVxB,MAAO,QACPC,OAAQ,QACRwB,QAAS,GACTtB,WAAY,kBAgBHuB,MAXf,WACE,IAAMpB,EAAUX,IAEhB,OACE,sBAAKa,UAAWF,EAAQP,KAAxB,UACE,cAAC4B,EAAA,EAAD,IACA,cAAC,EAAD,QCfSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.efc02a77.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\ninterface Props {\n  value: number\n}\n\n// define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 100,\n      height: 100,\n      margin: 5,\n      background: 'white',\n    },\n  })\n)\n\nconst Tile: FC<Props> = ({ value }): ReactElement => {\n  const classes = useStyles()\n\n  return <Button className={classes.root}>{value}</Button>\n}\n\nexport default Tile\n","import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\n// components\nimport Tile from './Tile/Tile'\n\n// define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      background: 'orange',\n    },\n  })\n)\n\nconst Board: FC = (): ReactElement => {\n  const classes = useStyles()\n\n  // a temporary test configuration of the board\n  let boardConfig = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8],\n  ]\n\n  let rows = []\n\n  // loop through every row of the board configuration and generate a box with tiles for each\n  for (var i = 0; i < boardConfig.length; i++) {\n    const row = boardConfig[i]\n\n    let rowTiles = []\n    for (var j = 0; j < row.length; j++) {\n      rowTiles.push(<Tile key={j} value={row[j]} />)\n    }\n\n    rows.push(<Box key={i}>{rowTiles}</Box>)\n  }\n\n  return (\n    <Box data-testid=\"board\" className={classes.root}>\n      {rows}\n    </Box>\n  )\n}\n\nexport default Board\n","import React from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { CssBaseline } from '@material-ui/core'\n\n// components\nimport Board from './components/Board/Board'\n\n// define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minWidth: 320,\n      width: '100vw',\n      height: '100vh',\n      padding: 20,\n      background: 'lightGrey',\n    },\n  })\n)\n\nfunction App() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Board />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}