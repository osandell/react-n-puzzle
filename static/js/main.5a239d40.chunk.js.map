{"version":3,"sources":["components/Board/Tile/Tile.tsx","components/Board/Board.tsx","components/UI/AlertDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","props","width","height","margin","backgroundColor","visibility","value","Tile","classes","Button","className","onClick","position","display","flexDirection","background","Board","boardConfig","handleClickTile","board","i","length","row","rowTiles","j","push","column","Box","AlertDialog","content","setContent","handleAlternative1","undefined","alternative1Function","dialogContent","description","DialogContent","DialogContentText","id","Dialog","open","onClose","DialogTitle","title","DialogActions","color","alternative1","alternative2","alternative2Function","autoFocus","darkTheme","createTheme","palette","type","typography","fontFamily","justifyContent","alignItems","minWidth","padding","levelBox","marginBottom","panelAndBoardContainer","controlPanel","marginRight","newGameButton","marginTop","nrOfRowsOrColumnsBox","nrOfRowsOrColumnsText","borderRadius","fontSize","userSelect","increaseOrDecreaseButton","boardBox","App","useState","nrOfRows","setNrOfRows","nrOfColumns","setNrOfColumns","setBoardConfig","emptySquarePosition","setEmptySquarePosition","currentLevel","setCurrentLevel","invokeShuffle","setInvokeShuffle","alertProps","setAlertProps","hasMadeFirstMove","setHasMadeFirstMove","useEffect","newBoardConfig","clickPosition","shuffleDirection","newEmptySquarePosition","Math","random","timesToShuffle","foundValidColumn","columnOfTileToMove","randomColumn","round","tileToMove","foundValidRow","rowOfTileToMove","randomRow","displayWarning","functionToRunOnAffirmation","ThemeProvider","CssBaseline","Typography","variant","style","IconButton","disabled","correctOrder","MAX_NR_OF_COLUMNS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a239d40.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\n// Interfaces\nimport TilePosition from '../../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  position: TilePosition\n  value: number\n  onClick: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles<Theme, Props>((theme: Theme) =>\n  createStyles({\n    root: (props) => ({\n      width: 100,\n      height: 100,\n      margin: 5,\n      backgroundColor: '#444',\n      '&:hover': {\n        backgroundColor: '#00000090',\n      },\n      '@media (hover: hover)': {\n        '&:hover': {\n          backgroundColor: '#00000090',\n        },\n      },\n      // We always have one button with value === null that represents the empty square,\n      // that's why we hide it.\n      visibility: `${props.value === null ? 'hidden' : 'visible'}`,\n    }),\n  })\n)\n\nconst Tile: FC<Props> = (props): ReactElement => {\n  const classes = useStyles(props)\n\n  return (\n    <Button\n      className={classes.root}\n      onClick={() => props.onClick(props.position)}\n    >\n      {/* We need some placeholder string even on the hidden button to keep the right dimensions. */}\n      {props.value === null ? '\\u00A0' : props.value}\n    </Button>\n  )\n}\n\nexport default Tile\n","import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\n// Components\nimport Tile from './Tile/Tile'\n\n// Interfaces\nimport TilePosition from '../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  boardConfig: any[]\n  handleClickTile: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'inline-flex',\n      flexDirection: 'column',\n      background: 'orange',\n    },\n  })\n)\n\nconst Board: FC<Props> = ({ boardConfig, handleClickTile }): ReactElement => {\n  const classes = useStyles()\n\n  // loop through every row of the board configuration and generate a box with tiles for each\n  let board = []\n  for (let i = 0; i < boardConfig.length; i++) {\n    const row = boardConfig[i]\n\n    let rowTiles = []\n    for (let j = 0; j < row.length; j++) {\n      rowTiles.push(\n        <Tile\n          key={j}\n          position={{ row: i, column: j }}\n          value={row[j]}\n          onClick={(position: TilePosition) => handleClickTile(position)}\n        />\n      )\n    }\n\n    board.push(<Box key={i}>{rowTiles}</Box>)\n  }\n\n  return (\n    <Box data-testid=\"board\" className={classes.root}>\n      {board}\n    </Box>\n  )\n}\n\nexport default Board\n","import { ReactElement, FC } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\n// interfaces\nimport AlertContent from '../../shared/interfaces/AlertProps.interface'\n\ninterface AlertDialogProps {\n  content: AlertContent\n  setContent: (content: AlertContent | null) => void\n}\n\nconst AlertDialog: FC<AlertDialogProps> = ({\n  content,\n  setContent,\n}): ReactElement => {\n  const handleAlternative1 = () => {\n    if (content.alternative1Function !== undefined) {\n      content.alternative1Function()\n    }\n    setContent(null)\n  }\n  const handleAlternative2 = () => {\n    if (content.alternative2Function !== undefined) {\n      content.alternative2Function()\n    }\n    setContent(null)\n  }\n\n  let dialogContent = null\n  if (content.description !== undefined) {\n    dialogContent = (\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content.description}\n        </DialogContentText>\n      </DialogContent>\n    )\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={true}\n        onClose={handleAlternative1}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{content.title}</DialogTitle>\n        {dialogContent}\n        <DialogActions>\n          <Button onClick={handleAlternative1} color=\"secondary\">\n            {content.alternative1}\n          </Button>\n          {content.alternative2 !== undefined && (\n            <Button onClick={handleAlternative2} color=\"secondary\" autoFocus>\n              {content.alternative2}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default AlertDialog\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme,\n  createTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles'\nimport { CssBaseline } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport Typography from '@material-ui/core/Typography'\n\n// Components\nimport Board from './components/Board/Board'\nimport AlertDialog from './components/UI/AlertDialog'\n\n// Interfaces\nimport TilePosition from './shared/interfaces/TilePosition.interface'\nimport AlertProps from './shared/interfaces/AlertProps.interface'\n\n// Types\ntype ShuffleDirection = 'horizontal' | 'vertical'\n\n// Create a dark theme.\nconst darkTheme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    fontFamily: `\"Open Sans\", sans-serif`,\n  },\n})\n\n// Define css-in-js.\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minWidth: 320,\n      width: '100vw',\n      height: '100vh',\n      padding: 20,\n      background: '#333',\n    },\n    levelBox: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginBottom: 100,\n    },\n    panelAndBoardContainer: {\n      display: 'flex',\n    },\n    controlPanel: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginRight: 50,\n    },\n    newGameButton: {\n      marginTop: 60,\n      backgroundColor: '#4a4a4a',\n    },\n    nrOfRowsOrColumnsBox: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      marginBottom: 20,\n    },\n    nrOfRowsOrColumnsText: {\n      display: 'flex',\n      alignItems: 'center',\n      borderRadius: 8,\n      padding: 5,\n      fontSize: 16,\n      margin: '0 10px 0 10px',\n      userSelect: 'none',\n    },\n    increaseOrDecreaseButton: {\n      backgroundColor: '#4a4a4a',\n    },\n    boardBox: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      width: 500,\n    },\n    typography: {\n      userSelect: 'none',\n    },\n  })\n)\n\n// Global constants\nconst MIN_NR_OF_ROWS = 2\nconst MAX_NR_OF_ROWS = 4\nconst MIN_NR_OF_COLUMNS = 2\nconst MAX_NR_OF_COLUMNS = 4\nconst SHUFFLE_QUALITY = 4\n\nfunction App() {\n  const classes = useStyles()\n\n  const [nrOfRows, setNrOfRows] = useState<number>(2)\n  const [nrOfColumns, setNrOfColumns] = useState<number>(2)\n  const [boardConfig, setBoardConfig] = useState<any[]>([])\n  const [emptySquarePosition, setEmptySquarePosition] = useState<TilePosition>({\n    row: nrOfRows - 1,\n    column: nrOfColumns - 1,\n  })\n  const [currentLevel, setCurrentLevel] = useState<number>(1)\n  const [invokeShuffle, setInvokeShuffle] = useState<boolean>(false)\n  const [alertProps, setAlertProps] = useState<AlertProps | null>(null)\n  const [hasMadeFirstMove, setHasMadeFirstMove] = useState<boolean>(false)\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // This callback will be called whenever the page reloads, the user changes board size, or clicks the\n  // shuffle button.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  useEffect(() => {\n    if (invokeShuffle) {\n      setInvokeShuffle(false)\n    }\n\n    //////////////////////////////\n    // Initiate the board.\n    //////////////////////////////\n    let newBoardConfig: any[] = []\n\n    for (let i = 0; i < nrOfRows; i++) {\n      newBoardConfig.push([])\n      for (let j = 0; j < nrOfColumns; j++) {\n        // When we reach the last position we leave it without a value so that it becomes an empty\n        // square allowing us to move around the pieces.\n        if (i === nrOfRows - 1 && j === nrOfColumns - 1) {\n          newBoardConfig[i].push(null)\n        } else {\n          newBoardConfig[i].push(i * nrOfColumns + j + 1)\n        }\n      }\n    }\n\n    //////////////////////////////\n    // Shuffle the tiles.\n    //////////////////////////////\n\n    // Store the position of the empty square so we can keep track of it while shuffling\n    let newEmptySquarePosition: TilePosition = {\n      row: nrOfRows - 1,\n      column: nrOfColumns - 1,\n    }\n\n    // This variable represents a \"virtual\" click position that is generated for each shuffle iteration.\n    let clickPosition\n\n    // Randomize whether to start moving tiles horizontally or vertically.\n    let shuffleDirection: ShuffleDirection\n    Math.random() < 0.5\n      ? (shuffleDirection = 'horizontal')\n      : (shuffleDirection = 'vertical')\n\n    // Calculate how many times to shuffle based on the board size.\n    const timesToShuffle = nrOfRows * nrOfColumns * SHUFFLE_QUALITY\n\n    for (let i = 0; i < timesToShuffle; i++) {\n      // Alternate horizontally and vertically and move a randomized amount of tiles.\n      if (shuffleDirection === 'horizontal') {\n        // Now we need to pick a random tile on the row with the empty square. We do this by\n        // randomizing columns until we find one that doesn't include the empty square.\n        let foundValidColumn = false\n        let columnOfTileToMove = 0\n        while (!foundValidColumn) {\n          let randomColumn = Math.round(Math.random() * (nrOfColumns - 1))\n          if (!(randomColumn === newEmptySquarePosition.column)) {\n            columnOfTileToMove = randomColumn\n            foundValidColumn = true\n          }\n        }\n\n        // Generate a the position on the board to make a \"virtual\" click.\n        clickPosition = {\n          row: newEmptySquarePosition.row,\n          column: columnOfTileToMove,\n        }\n\n        // Determine if the tile to be moved is located to the left or to the right of the\n        // empty square and move in correct direction.\n        if (clickPosition.column < newEmptySquarePosition.column) {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column - 1,\n          }\n\n          while (tileToMove.column >= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column - 1,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column + 1,\n          }\n\n          while (tileToMove.column <= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column + 1,\n            }\n          }\n        }\n\n        // Change direction of tile movement for next round\n        shuffleDirection = 'vertical'\n      } else if (shuffleDirection === 'vertical') {\n        let foundValidRow = false\n        let rowOfTileToMove = 0\n        while (!foundValidRow) {\n          let randomRow = Math.round(Math.random() * (nrOfRows - 1))\n          if (!(randomRow === newEmptySquarePosition.row)) {\n            rowOfTileToMove = randomRow\n            foundValidRow = true\n          }\n        }\n\n        clickPosition = {\n          row: rowOfTileToMove,\n          column: newEmptySquarePosition.column,\n        }\n\n        // Determine if the tile to be moved is located over or under the empty square\n        // and move in correct direction.\n        if (clickPosition.row < newEmptySquarePosition.row) {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row - 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row >= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row - 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row + 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row <= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row + 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        }\n\n        shuffleDirection = 'horizontal'\n      }\n    }\n    newBoardConfig[newEmptySquarePosition.row][newEmptySquarePosition.column] =\n      null\n    setBoardConfig(newBoardConfig)\n    setEmptySquarePosition(newEmptySquarePosition)\n  }, [setBoardConfig, nrOfRows, nrOfColumns, invokeShuffle])\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // This handler is activated when the user clicks on a tile that lines up either horizonally or\n  // vertically with the empty square.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleClickTile = (clickPosition: TilePosition) => {\n    // Make sure the user clicked on a valid tile\n    if (\n      clickPosition.row === emptySquarePosition.row ||\n      clickPosition.column === emptySquarePosition.column\n    ) {\n      let newBoardConfig: any[] = [...boardConfig]\n      let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n      // If the tile is on the same row as the empty square we need to move horizontally.\n      if (clickPosition.row === emptySquarePosition.row) {\n        // Determine if we clicked to the left or to the right of the empty square and move in\n        // correct direction.\n        if (clickPosition.column < newEmptySquarePosition.column) {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column - 1,\n          }\n\n          while (tileToMove.column >= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column - 1,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column + 1,\n          }\n\n          while (tileToMove.column <= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column + 1,\n            }\n          }\n        }\n\n        // If the tile is on the same column as the emptly square we need to move vertically.\n      } else if (clickPosition.column === emptySquarePosition.column) {\n        // Determine if we clicked over or under the empty square and move in correct direction.\n        if (clickPosition.row < newEmptySquarePosition.row) {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row - 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row >= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row - 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row + 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row <= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row + 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        }\n      }\n      // If this is the first move of the game then set a flag in order to make sure we warn before\n      // resetting the board again.\n      !hasMadeFirstMove && setHasMadeFirstMove(true)\n\n      // Check if the user has managed to put the tiles in the right order.\n      let correctOrder = true\n\n      for (let i = 0; i < nrOfRows && correctOrder; i++) {\n        for (let j = 0; j < nrOfColumns && correctOrder; j++) {\n          // Don't check the last square for a value since it's supposed to be empty.\n          if (\n            newBoardConfig[i][j] !== i * nrOfColumns + j + 1 &&\n            !(i === nrOfRows - 1 && j === nrOfColumns - 1)\n          ) {\n            correctOrder = false\n          }\n        }\n      }\n\n      if (correctOrder) {\n        // Check if this was the last level.\n        if (currentLevel === MAX_NR_OF_COLUMNS + MAX_NR_OF_ROWS - 3) {\n          setAlertProps({\n            title: 'Congratulations!',\n            description: 'You have finished the last level. Great job!!',\n            alternative2: 'Ok',\n          })\n        } else {\n          setAlertProps({\n            title: 'Congratulations!',\n            description: `You finished level ${currentLevel}. Advancing to level ${\n              currentLevel + 1\n            }.`,\n            alternative2: 'Ok',\n            alternative2Function: () => {\n              // Go to the next level by adding either a row or a column depending on which is the most scarce\n              // at the moment.\n              nrOfColumns <= nrOfRows\n                ? setNrOfColumns(nrOfColumns + 1)\n                : setNrOfRows(nrOfRows + 1)\n\n              setCurrentLevel(currentLevel + 1)\n            },\n          })\n        }\n      }\n\n      newBoardConfig[newEmptySquarePosition.row][\n        newEmptySquarePosition.column\n      ] = null\n      setBoardConfig(newBoardConfig)\n      setEmptySquarePosition(newEmptySquarePosition)\n    }\n  }\n\n  const displayWarning = (functionToRunOnAffirmation: () => void) => {\n    setAlertProps({\n      title: 'Are you sure?',\n      description: 'This will quit your current game.',\n      alternative1: 'Cancel',\n      alternative2: 'OK',\n      alternative2Function: () => {\n        functionToRunOnAffirmation()\n        setHasMadeFirstMove(false)\n      },\n    })\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // A few handlers for button clicks. We always check if the user has made a first move and if so we\n  // give a warning before resetting the board.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleClickShuffle = () => {\n    hasMadeFirstMove\n      ? displayWarning(() => setInvokeShuffle(true))\n      : setInvokeShuffle(true)\n  }\n\n  const handleDecreaseNrOfRows = () => {\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setNrOfRows(nrOfRows - 1)\n        setCurrentLevel(currentLevel - 1)\n      })\n    } else {\n      setNrOfRows(nrOfRows - 1)\n      setCurrentLevel(currentLevel - 1)\n    }\n  }\n  const handleIncreaseNrOfRows = () => {\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setNrOfRows(nrOfRows + 1)\n        setCurrentLevel(currentLevel + 1)\n      })\n    } else {\n      setNrOfRows(nrOfRows + 1)\n      setCurrentLevel(currentLevel + 1)\n    }\n  }\n  const handleDecreaseNrOfColumns = () => {\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setNrOfColumns(nrOfColumns - 1)\n        setCurrentLevel(currentLevel - 1)\n      })\n    } else {\n      setNrOfColumns(nrOfColumns - 1)\n      setCurrentLevel(currentLevel - 1)\n    }\n  }\n  const handleIncreaseNrOfColumns = () => {\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setNrOfColumns(nrOfColumns + 1)\n        setCurrentLevel(currentLevel + 1)\n      })\n    } else {\n      setNrOfColumns(nrOfColumns + 1)\n      setCurrentLevel(currentLevel + 1)\n    }\n  }\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <Box className={classes.levelBox}>\n          <Typography\n            className={classes.typography}\n            display=\"block\"\n            variant=\"h3\"\n            color=\"secondary\"\n          >\n            {'Level ' + currentLevel}\n          </Typography>\n        </Box>\n\n        <Box className={classes.panelAndBoardContainer}>\n          <Box className={classes.controlPanel}>\n            <Box className={classes.nrOfRowsOrColumnsBox}>\n              <Typography\n                className={classes.typography}\n                display=\"block\"\n                variant=\"body1\"\n                style={{ width: '80px' }}\n              >\n                {'Rows:'}\n              </Typography>\n              <IconButton\n                className={classes.increaseOrDecreaseButton}\n                aria-label=\"subtract\"\n                disabled={nrOfRows === MIN_NR_OF_ROWS ? true : false}\n                onClick={handleDecreaseNrOfRows}\n              >\n                <RemoveIcon />\n              </IconButton>\n              <span className={classes.nrOfRowsOrColumnsText}>{nrOfRows}</span>\n              <IconButton\n                className={classes.increaseOrDecreaseButton}\n                aria-label=\"add\"\n                disabled={nrOfRows === MAX_NR_OF_ROWS ? true : false}\n                onClick={handleIncreaseNrOfRows}\n              >\n                <AddIcon />\n              </IconButton>\n            </Box>\n            <Box className={classes.nrOfRowsOrColumnsBox}>\n              <Typography\n                className={classes.typography}\n                display=\"block\"\n                variant=\"body1\"\n                style={{ width: '80px' }}\n              >\n                {'Columns:'}\n              </Typography>\n              <IconButton\n                className={classes.increaseOrDecreaseButton}\n                aria-label=\"subtract\"\n                disabled={nrOfColumns === MIN_NR_OF_COLUMNS ? true : false}\n                onClick={handleDecreaseNrOfColumns}\n              >\n                <RemoveIcon />\n              </IconButton>\n              <span className={classes.nrOfRowsOrColumnsText}>\n                {nrOfColumns}\n              </span>\n              <IconButton\n                className={classes.increaseOrDecreaseButton}\n                aria-label=\"add\"\n                disabled={nrOfColumns === MAX_NR_OF_COLUMNS ? true : false}\n                onClick={handleIncreaseNrOfColumns}\n              >\n                <AddIcon />\n              </IconButton>\n            </Box>\n            <Button\n              className={classes.newGameButton}\n              onClick={() => handleClickShuffle()}\n            >\n              shuffle\n            </Button>\n          </Box>\n          <Box className={classes.boardBox}>\n            <Board\n              boardConfig={boardConfig}\n              handleClickTile={(position: TilePosition) =>\n                handleClickTile(position)\n              }\n            />\n          </Box>\n        </Box>\n        {alertProps !== null && (\n          <AlertDialog content={alertProps} setContent={setAlertProps} />\n        )}\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}