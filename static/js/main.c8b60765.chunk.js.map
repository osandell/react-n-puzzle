{"version":3,"sources":["components/Board/Tile/Tile.tsx","components/Board/Board.tsx","components/UI/AlertDialog.tsx","utils/gameLogic.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TILE_SIZE","useStyles","makeStyles","theme","createStyles","root","props","minWidth","minHeight","width","height","margin","position","hidden","visibility","left","column","top","row","transition","backgroundColor","Tile","classes","Button","className","onClick","value","display","flexDirection","background","borderRadius","Board","board","hiddenBoard","i","boardConfig","length","rowTiles","j","push","handleClickTile","Box","AlertDialog","content","setContent","handleAlternative1","undefined","alternative1Function","dialogContent","description","DialogContent","DialogContentText","id","Dialog","open","onClose","DialogTitle","title","DialogActions","color","alternative1","alternative2","alternative2Function","autoFocus","getEmptySquarePosition","newBoardConfig","emptySquarePosition","moveTiles","clickPosition","tileToMove","shuffleTiles","shuffleDirection","nrOfRows","nrOfColumns","Math","random","timesToShuffle","foundValidColumn","columnOfTileToMove","randomColumn","round","foundValidRow","rowOfTileToMove","randomRow","initiateBoard","newNrOfRows","newNrOfColumns","initialBoardConfig","darkTheme","createTheme","palette","type","typography","fontFamily","justifyContent","alignItems","padding","contentContainer","breakpoints","up","down","levelBox","marginBottom","panelAndBoardContainer","controlPanel","marginRight","shuffleButton","marginTop","nrOfRowsOrColumnsBox","nrOfRowsOrColumnsText","fontSize","userSelect","increaseOrDecreaseButton","rootButton","disabled","boardBox","App","useState","setBoardConfig","currentLevel","setCurrentLevel","alertProps","setAlertProps","hasMadeFirstMove","setHasMadeFirstMove","displayWarning","functionToRunOnAffirmation","ThemeProvider","CssBaseline","Typography","variant","style","IconButton","correctOrder","MAX_NR_OF_COLUMNS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAcMA,EAAY,GAIZC,EAAYC,aAAyB,SAACC,GAAD,OACzCC,YAAa,CACXC,KAAM,SAACC,GAAD,MAAY,CAChBC,SAAUP,EACVQ,UAAWR,EACXS,MAAOT,EACPU,OAAQV,EACRW,OAVc,EAadC,SAAS,GAAD,OAAKN,EAAMO,OAAS,UAAY,YACxCC,WAAW,GAAD,OAAKR,EAAMO,OAAS,SAAW,WACzCE,KAAM,GAAAT,EAAMM,SAASI,OACrBC,IAAK,GAAAX,EAAMM,SAASM,IACpBC,WAAY,gBACZC,gBAAiB,OACjB,UAAW,CACTA,gBAAiB,aAEnB,wBAAyB,CACvB,UAAW,CACTA,gBAAiB,qBAoBZC,EAbS,SAACf,GACvB,IAAMgB,EAAUrB,EAAUK,GAE1B,OACE,cAACiB,EAAA,EAAD,CACEC,UAAWF,EAAQjB,KACnBoB,QAAS,kBAAMnB,EAAMmB,QAAQnB,EAAMM,WAFrC,SAIGN,EAAMoB,SCvCPzB,EAAYC,aAAyB,SAACC,GAAD,OACzCC,YAAa,CACXC,KAAM,SAACC,GAAD,MAAY,CAChBqB,QAAS,cACTf,SAAU,WACVgB,cAAe,SACfC,WAAY,SACZC,aAAc,SAmDLC,EA9CU,SAACzB,GASxB,IARA,IAAMgB,EAAUrB,EAAUK,GAMtB0B,EAAQ,GACRC,EAAc,GACTC,EAAI,EAAGA,EAAI5B,EAAM6B,YAAYC,OAAQF,IAAK,CAIjD,IAHA,IAAMhB,EAAMZ,EAAM6B,YAAYD,GAE1BG,EAAW,GACNC,EAAI,EAAGA,EAAIpB,EAAIkB,OAAQE,IACnB,OAAXpB,EAAIoB,IACFN,EAAMO,KACJ,cAAC,EAAD,CAEE3B,SAAU,CAAEM,IAAKgB,EAAGlB,OAAQsB,GAC5BZ,MAAOR,EAAIoB,GACXb,QAAS,SAACb,GAAD,OACPN,EAAMkC,gBAAgB5B,KAJnBM,EAAIoB,KAQfD,EAASE,KACP,cAAC,EAAD,CAEE3B,SAAU,CAAEM,IAAKgB,EAAGlB,OAAQsB,GAC5BzB,QAAM,EACNY,QAAS,SAACb,GAAD,OAA4BN,EAAMkC,gBAAgB5B,KAHtD0B,IAQXL,EAAYM,KAAK,cAACE,EAAA,EAAD,UAAcJ,GAAJH,IAG7B,OACE,eAACO,EAAA,EAAD,CAAK,cAAY,QAAQjB,UAAWF,EAAQjB,KAA5C,UACG2B,EACAC,M,6CCCQS,EArD2B,SAAC,GAGtB,IAFnBC,EAEkB,EAFlBA,QACAC,EACkB,EADlBA,WAEMC,EAAqB,gBACYC,IAAjCH,EAAQI,sBACVJ,EAAQI,uBAEVH,EAAW,OASTI,EAAgB,KAWpB,YAV4BF,IAAxBH,EAAQM,cACVD,EACE,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBC,GAAG,2BAAtB,SACGT,EAAQM,iBAOf,8BACE,eAACI,EAAA,EAAD,CACEC,MAAM,EACNC,QAASV,EACT,kBAAgB,qBAChB,mBAAiB,2BAJnB,UAME,cAACW,EAAA,EAAD,CAAaJ,GAAG,qBAAhB,SAAsCT,EAAQc,QAC7CT,EACD,eAACU,EAAA,EAAD,WACE,cAACnC,EAAA,EAAD,CAAQE,QAASoB,EAAoBc,MAAM,YAA3C,SACGhB,EAAQiB,oBAEed,IAAzBH,EAAQkB,cACP,cAACtC,EAAA,EAAD,CAAQE,QAjCS,gBACYqB,IAAjCH,EAAQmB,sBACVnB,EAAQmB,uBAEVlB,EAAW,OA6BkCe,MAAM,YAAYI,WAAS,EAAhE,SACGpB,EAAQkB,wBChDVG,EAAyB,SAACC,GAErC,IADA,IAAIC,EAAoC,CAAEhD,IAAK,EAAGF,OAAQ,GACjDkB,EAAI,EAAGA,EAAI+B,EAAe7B,OAAQF,IAEzC,IADA,IAAMhB,EAAM+C,EAAe/B,GAClBI,EAAI,EAAGA,EAAIpB,EAAIkB,OAAQE,IAAK,CAErB,OADApB,EAAIoB,KAEhB4B,EAAsB,CAAEhD,IAAKgB,EAAGlB,OAAQsB,IAK9C,OAAO4B,GAMIC,EAAY,SACvBC,EACAH,GAGA,IAAIC,EAAsBF,EAAuBC,GAGjD,GAAIG,EAAclD,MAAQgD,EAAoBhD,IAG5C,GAAIkD,EAAcpD,OAASkD,EAAoBlD,OAM7C,IALA,IAAIqD,EAA2B,CAC7BnD,IAAKkD,EAAclD,IACnBF,OAAQkD,EAAoBlD,OAAS,GAGhCqD,EAAWrD,QAAUoD,EAAcpD,QACxCiD,EAAeC,EAAoBhD,KAAKgD,EAAoBlD,QAC1DiD,EAAeI,EAAWnD,KAAKmD,EAAWrD,QAE5CqD,EAAWrD,OAASqD,EAAWrD,OAAS,EACxCkD,EAAsB,CACpBhD,IAAKgD,EAAoBhD,IACzBF,OAAQkD,EAAoBlD,OAAS,QASzC,IALA,IAAIqD,EAA2B,CAC7BnD,IAAKkD,EAAclD,IACnBF,OAAQkD,EAAoBlD,OAAS,GAGhCqD,EAAWrD,QAAUoD,EAAcpD,QACxCiD,EAAeC,EAAoBhD,KAAKgD,EAAoBlD,QAC1DiD,EAAeI,EAAWnD,KAAKmD,EAAWrD,QAE5CqD,EAAWrD,OAASqD,EAAWrD,OAAS,EACxCkD,EAAsB,CACpBhD,IAAKgD,EAAoBhD,IACzBF,OAAQkD,EAAoBlD,OAAS,QAMtC,GAAIoD,EAAcpD,SAAWkD,EAAoBlD,OAEtD,GAAIoD,EAAclD,IAAMgD,EAAoBhD,IAM1C,IALA,IAAImD,EAA2B,CAC7BnD,IAAKgD,EAAoBhD,IAAM,EAC/BF,OAAQoD,EAAcpD,QAGjBqD,EAAWnD,KAAOkD,EAAclD,KACrC+C,EAAeC,EAAoBhD,KAAKgD,EAAoBlD,QAC1DiD,EAAeI,EAAWnD,KAAKmD,EAAWrD,QAE5CqD,EAAWnD,IAAMmD,EAAWnD,IAAM,EAClCgD,EAAsB,CACpBhD,IAAKgD,EAAoBhD,IAAM,EAC/BF,OAAQkD,EAAoBlD,aAShC,IALA,IAAIqD,EAA2B,CAC7BnD,IAAKgD,EAAoBhD,IAAM,EAC/BF,OAAQoD,EAAcpD,QAGjBqD,EAAWnD,KAAOkD,EAAclD,KACrC+C,EAAeC,EAAoBhD,KAAKgD,EAAoBlD,QAC1DiD,EAAeI,EAAWnD,KAAKmD,EAAWrD,QAE5CqD,EAAWnD,IAAMmD,EAAWnD,IAAM,EAClCgD,EAAsB,CACpBhD,IAAKgD,EAAoBhD,IAAM,EAC/BF,OAAQkD,EAAoBlD,QAOpC,OADAiD,EAAeC,EAAoBhD,KAAKgD,EAAoBlD,QAAU,KAC/DiD,GAOIK,EAAe,SAACL,GAC3B,IAOIM,EAPAC,EAAWP,EAAe7B,OAC1BqC,EAAcR,EAAe,GAAG7B,OAGhCgC,EAA8B,CAAElD,IAAK,EAAGF,OAAQ,GAK/CuD,EADLG,KAAKC,SAAW,GACQ,aACA,WAKxB,IAFA,IAAMC,EAAiBJ,EAAWC,EAhIZ,EAkIbvC,EAAI,EAAGA,EAAI0C,EAAgB1C,IAAK,CAEvC,IAAIgC,EAAsBF,EAAuBC,GAGjD,GAAyB,eAArBM,EAAmC,CAKrC,IAFA,IAAIM,GAAmB,EACnBC,EAAqB,GACjBD,GAAkB,CACxB,IAAIE,EAAeL,KAAKM,MAAMN,KAAKC,UAAYF,EAAc,IACvDM,IAAiBb,EAAoBlD,SACzC8D,EAAqBC,EACrBF,GAAmB,GAKvBT,EAAgB,CACdlD,IAAKgD,EAAoBhD,IACzBF,OAAQ8D,GAIVP,EAAmB,gBACd,GAAyB,aAArBA,EAAiC,CAG1C,IAFA,IAAIU,GAAgB,EAChBC,EAAkB,GACdD,GAAe,CACrB,IAAIE,EAAYT,KAAKM,MAAMN,KAAKC,UAAYH,EAAW,IACjDW,IAAcjB,EAAoBhD,MACtCgE,EAAkBC,EAClBF,GAAgB,GAIpBb,EAAgB,CACdlD,IAAKgE,EACLlE,OAAQkD,EAAoBlD,QAE9BuD,EAAmB,aAGrBN,EAAiBE,EAAUC,EAAeH,GAG5C,OAAOA,GAMImB,EAAgB,SAC3BC,EACAC,GAKA,IAFA,IAAIC,EAA4B,GAEvBrD,EAAI,EAAGA,EAAImD,EAAanD,IAAK,CACpCqD,EAAmBhD,KAAK,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIgD,EAAgBhD,IAG9BJ,IAAMmD,EAAc,GAAK/C,IAAMgD,EAAiB,EAClDC,EAAmBrD,GAAGK,KAAK,MAE3BgD,EAAmBrD,GAAGK,KAAKL,EAAIoD,EAAiBhD,EAAI,GAQ1D,OAF8BgC,EAAaiB,ICjLvCC,EAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,QAERC,WAAY,CACVC,WAAW,6BAKT5F,EAAYC,aAAW,SAACC,GAAD,mBAC3BC,YAAa,CACXC,KAAM,CACJsB,QAAS,OACTC,cAAe,SACfkE,eAAgB,SAChBC,WAAY,SACZxF,SAAU,IACVE,MAAO,QACPC,OAAQ,QACRsF,QAAS,GACTnE,WAAY,QAEdoE,kBAAgB,GACdxF,MAAO,QACPC,OAAQ,MAFM,wBAIVP,EAAM+F,YAAYC,GAAG,OAAU,CACjC1F,MAAO,IACPC,OAAQ,MANI,wBAQVP,EAAM+F,YAAYE,KAAK,MARb,iCAQoD,CAChE3F,MAAO,IACPC,OAAQ,MAVI,GAahB2F,UAAQ,GACNP,eAAgB,SAChBnE,QAAS,OACT2E,aAAc,IAHR,wBAKFnG,EAAM+F,YAAYC,GAAG,OAAU,CACjCL,eAAgB,eANZ,wBAQF3F,EAAM+F,YAAYE,KAAK,MARrB,iCAQ4D,CAChEN,eAAgB,eATZ,GAYRS,wBAAsB,GACpB5E,QAAS,OACToE,WAAY,SACZnE,cAAe,UAHK,wBAKhBzB,EAAM+F,YAAYC,GAAG,OAAU,CACjCvE,cAAe,MACfmE,WAAY,aACZD,eAAgB,kBARE,wBAUhB3F,EAAM+F,YAAYE,KAAK,MAVP,iCAU8C,CAChExE,cAAe,MACfmE,WAAY,aACZD,eAAgB,kBAbE,GAgBtBU,cAAY,GACV7E,QAAS,OACTC,cAAe,SACfkE,eAAgB,SAChBC,WAAY,UAJF,wBAMN5F,EAAM+F,YAAYC,GAAG,OAAU,CACjCJ,WAAY,aACZU,YAAa,KARL,wBAUNtG,EAAM+F,YAAYE,KAAK,MAVjB,iCAUwD,CAChEL,WAAY,aACZU,YAAa,KAZL,GAeZC,cAAe,CACbC,UAAW,GACXL,aAAc,GAIdlF,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,WAEnB,wBAAyB,CACvB,UAAW,CACTA,gBAAiB,eAIvBwF,qBAAqB,aACnBjF,QAAS,OACToE,WAAY,SACZD,eAAgB,gBAChBrF,MAAO,IACP6F,aAAc,IALI,UAOdnG,EAAM+F,YAAYE,KAAK,MAPT,iCAOgD,CAChE3F,MAAO,MAGXoG,sBAAuB,CACrBlF,QAAS,OACToE,WAAY,SACZjE,aAAc,EACdkE,QAAS,EACTc,SAAU,GACVnG,OAAQ,gBACRoG,WAAY,QAEdC,yBAA0B,CACxB5F,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,WAEnB,wBAAyB,CACvB,UAAW,CACTA,gBAAiB,eAOvB6F,WAAY,CACV,aAAc,CACZ7F,gBAAiB,YAGrB8F,SAAU,GACVC,SAAU,CACRxF,QAAS,OACTmE,eAAgB,UAElBF,WAAY,CACVmB,WAAY,aA0SHK,MA7Rf,WACE,IAAM9F,EAAUrB,IAKhB,EAAsCoH,oBAAgB,kBACpDjC,EAduB,EACG,MAY5B,mBAAOjD,EAAP,KAAoBmF,EAApB,KAGA,EAAwCD,mBAAiB,GAAzD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,mBAA4B,MAAhE,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAgDL,oBAAkB,GAAlE,mBAAOM,EAAP,KAAyBC,EAAzB,KAoEMC,EAAiB,SAACC,GACtBJ,EAAc,CACZjE,MAAO,gBACPR,YAAa,oCACbW,aAAc,SACdC,aAAc,KACdC,qBAAsB,WACpBgE,IACAF,GAAoB,OA6EtBpD,EAAWrC,EAAYC,OACvBqC,EAActC,EAAY,GAAGC,OAEjC,OACE,eAAC2F,EAAA,EAAD,CAAe5H,MAAOqF,EAAtB,UACE,cAACwC,EAAA,EAAD,IAEA,cAACvF,EAAA,EAAD,CAAKjB,UAAWF,EAAQjB,KAAxB,SACE,eAACoC,EAAA,EAAD,CAAKjB,UAAWF,EAAQ2E,iBAAxB,UACE,cAACxD,EAAA,EAAD,CAAKjB,UAAWF,EAAQ+E,SAAxB,SACE,cAAC4B,EAAA,EAAD,CACEzG,UAAWF,EAAQsE,WACnBjE,QAAQ,QACRuG,QAAQ,KACRvE,MAAM,YAJR,SAMG,SAAW4D,MAIhB,eAAC9E,EAAA,EAAD,CAAKjB,UAAWF,EAAQiF,uBAAxB,UACE,eAAC9D,EAAA,EAAD,CAAKjB,UAAWF,EAAQkF,aAAxB,UACE,eAAC/D,EAAA,EAAD,CAAKjB,UAAWF,EAAQsF,qBAAxB,UACE,cAACqB,EAAA,EAAD,CACEzG,UAAWF,EAAQsE,WACnBjE,QAAQ,QACRuG,QAAQ,QACRC,MAAO,CAAE1H,MAAO,SAJlB,SAMG,UAEH,cAAC2H,EAAA,EAAD,CACE5G,UAAWF,EAAQ0F,yBACnB1F,QAAS,CACPjB,KAAMiB,EAAQ2F,WACdC,SAAU5F,EAAQ4F,UAEpB,aAAW,WACXA,SA/MK,IA+MK1C,EACV/C,QArGe,WAC7B,IAAI+C,EAAWrC,EAAYC,OACvBqC,EAActC,EAAY,GAAGC,OAEjC,GAAIuF,EACFE,GAAe,WACbL,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAW,EAAGC,GACnD6C,EAAerD,UAEZ,CACLuD,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAW,EAAGC,GACnD6C,EAAerD,KAgFL,SAUE,cAAC,IAAD,MAEF,sBAAMzC,UAAWF,EAAQuF,sBAAzB,SACGrC,IAEH,cAAC4D,EAAA,EAAD,CACE5G,UAAWF,EAAQ0F,yBACnB1F,QAAS,CACPjB,KAAMiB,EAAQ2F,WACdC,SAAU5F,EAAQ4F,UAEpB,aAAW,MACXA,SA7NK,IA6NK1C,EACV/C,QApGe,WAC7B,IAAI+C,EAAWrC,EAAYC,OACvBqC,EAActC,EAAY,GAAGC,OACjC,GAAIuF,EACFE,GAAe,WACbL,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAW,EAAGC,GACnD6C,EAAerD,UAEZ,CACLuD,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAW,EAAGC,GACnD6C,EAAerD,KAgFL,SAUE,cAAC,IAAD,SAGJ,eAACxB,EAAA,EAAD,CAAKjB,UAAWF,EAAQsF,qBAAxB,UACE,cAACqB,EAAA,EAAD,CACEzG,UAAWF,EAAQsE,WACnBjE,QAAQ,QACRuG,QAAQ,QACRC,MAAO,CAAE1H,MAAO,SAJlB,SAMG,aAEH,cAAC2H,EAAA,EAAD,CACE5G,UAAWF,EAAQ0F,yBACnB1F,QAAS,CACPjB,KAAMiB,EAAQ2F,WACdC,SAAU5F,EAAQ4F,UAEpB,aAAW,WACXA,SAlPQ,IAkPEzC,EACVhD,QA3GkB,WAChC,IAAI+C,EAAWrC,EAAYC,OACvBqC,EAActC,EAAY,GAAGC,OACjC,GAAIuF,EACFE,GAAe,WACbL,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAUC,EAAc,GAC7D6C,EAAerD,UAEZ,CACLuD,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAUC,EAAc,GAC7D6C,EAAerD,KAuFL,SAUE,cAAC,IAAD,MAEF,sBAAMzC,UAAWF,EAAQuF,sBAAzB,SACGpC,IAEH,cAAC2D,EAAA,EAAD,CACE5G,UAAWF,EAAQ0F,yBACnB1F,QAAS,CACPjB,KAAMiB,EAAQ2F,WACdC,SAAU5F,EAAQ4F,UAEpB,aAAW,MACXA,SAhQQ,IAgQEzC,EACVhD,QA3GkB,WAChC,IAAI+C,EAAWrC,EAAYC,OACvBqC,EAActC,EAAY,GAAGC,OACjC,GAAIuF,EACFE,GAAe,WACbL,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAUC,EAAc,GAC7D6C,EAAerD,UAEZ,CACLuD,EAAgBD,EAAe,GAC/B,IAAMtD,EAAiBmB,EAAcZ,EAAUC,EAAc,GAC7D6C,EAAerD,KAuFL,SAUE,cAAC,IAAD,SAGJ,cAAC1C,EAAA,EAAD,CACEC,UAAWF,EAAQoF,cACnBjF,QAAS,WArKrBkG,EACIE,GAAe,kBAAMP,EAAehD,EAAa,YAAInC,QACrDmF,EAAehD,EAAa,YAAInC,MAiK1B,wBAOF,cAACM,EAAA,EAAD,CAAKjB,UAAWF,EAAQ6F,SAAxB,SACE,cAAC,EAAD,CACEhF,YAAaA,EACbK,gBAAiB,SAAC5B,GAAD,OA7PP,SAACwD,GAEvB,IAAIF,EAAsBF,EAAuB,YAAI7B,IACrD,GACEiC,EAAclD,MAAQgD,EAAoBhD,KAC1CkD,EAAcpD,SAAWkD,EAAoBlD,OAC7C,CAEA,IAAIiD,EAAwBE,EAAUC,EAAD,YAAoBjC,KAGxDwF,GAAoBC,GAAoB,GAGzC,IADA,IAAIS,GAAe,EACVnG,EAAI,EAAGA,EAAIsC,GAAY6D,EAAcnG,IAC5C,IAAK,IAAII,EAAI,EAAGA,EAAImC,GAAe4D,EAAc/F,IAG7C2B,EAAe/B,GAAGI,KAAOJ,EAAIuC,EAAcnC,EAAI,GAC7CJ,IAAMsC,EAAW,GAAKlC,IAAMmC,EAAc,IAE5C4D,GAAe,GAIrB,GAAIA,EAAc,CAChB,IAAI7D,EAAWP,EAAe7B,OAC1BqC,EAAcR,EAAe,GAAG7B,OAIlCsF,EADmBY,IAAjBf,EACY,CACZ9D,MAAO,mBACPR,YAAa,gDACbY,aAAc,MAGF,CACZJ,MAAO,mBACPR,YAAY,sBAAD,OAAwBsE,EAAxB,gCACTA,EAAe,EADN,KAGX1D,aAAc,KACdC,qBAAsB,WAIlBG,EADEQ,GAAeD,EACAY,EAAcZ,EAAUC,EAAc,GAEtCW,EAAcZ,EAAW,EAAGC,GAE/C+C,EAAgBD,EAAe,GAC/BD,EAAerD,MAMvBqD,EAAerD,IAoMHzB,CAAgB5B,WAKR,OAAf6G,GACC,cAAC,EAAD,CAAa9E,QAAS8E,EAAY7E,WAAY8E,aClc3Ca,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8b60765.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\n// Interfaces\nimport TilePosition from '../../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  position: TilePosition\n  value?: number\n  hidden?: boolean\n  onClick: (position: TilePosition) => void\n}\n\n// Global constants\nconst TILE_SIZE = 50\nconst TILE_MARGIN = 2\n\n// Define css-in-js\nconst useStyles = makeStyles<Theme, Props>((theme: Theme) =>\n  createStyles({\n    root: (props) => ({\n      minWidth: TILE_SIZE,\n      minHeight: TILE_SIZE,\n      width: TILE_SIZE,\n      height: TILE_SIZE,\n      margin: TILE_MARGIN,\n      // If this is a hidden tile we want it to affect the size of the containing div. Therefore\n      // we only set the positioning to absolute in case it's a visible tile.\n      position: `${props.hidden ? 'initial' : 'absolute'}`,\n      visibility: `${props.hidden ? 'hidden' : 'visible'}`,\n      left: props.position.column * (TILE_SIZE + TILE_MARGIN),\n      top: props.position.row * (TILE_SIZE + TILE_MARGIN),\n      transition: 'all 0.6s ease',\n      backgroundColor: '#444',\n      '&:hover': {\n        backgroundColor: '#00000090',\n      },\n      '@media (hover: hover)': {\n        '&:hover': {\n          backgroundColor: '#00000090',\n        },\n      },\n    }),\n  })\n)\n\nconst Tile: FC<Props> = (props): ReactElement => {\n  const classes = useStyles(props)\n\n  return (\n    <Button\n      className={classes.root}\n      onClick={() => props.onClick(props.position)}\n    >\n      {props.value}\n    </Button>\n  )\n}\n\nexport default Tile\n","import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\n// Components\nimport Tile from './Tile/Tile'\n\n// Interfaces\nimport TilePosition from '../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  boardConfig: any[]\n  handleClickTile: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles<Theme, Props>((theme: Theme) =>\n  createStyles({\n    root: (props) => ({\n      display: 'inline-flex',\n      position: 'relative',\n      flexDirection: 'column',\n      background: 'orange',\n      borderRadius: 5,\n    }),\n  })\n)\n\nconst Board: FC<Props> = (props): ReactElement => {\n  const classes = useStyles(props)\n\n  // Loop through every position of the board and generate a tile plus a hidden tile. The visible\n  // tiles needs to be in a one dimensional array with consistent key properties in order to be able\n  // to animate. The hidden tiles on the other hand needs to be in a 2d array in order to fill out the\n  // appropriate space for the board.\n  let board = []\n  let hiddenBoard = []\n  for (let i = 0; i < props.boardConfig.length; i++) {\n    const row = props.boardConfig[i]\n\n    let rowTiles = []\n    for (let j = 0; j < row.length; j++) {\n      row[j] !== null &&\n        board.push(\n          <Tile\n            key={row[j]}\n            position={{ row: i, column: j }}\n            value={row[j]}\n            onClick={(position: TilePosition) =>\n              props.handleClickTile(position)\n            }\n          />\n        )\n      rowTiles.push(\n        <Tile\n          key={j}\n          position={{ row: i, column: j }}\n          hidden\n          onClick={(position: TilePosition) => props.handleClickTile(position)}\n        />\n      )\n    }\n\n    hiddenBoard.push(<Box key={i}>{rowTiles}</Box>)\n  }\n\n  return (\n    <Box data-testid=\"board\" className={classes.root}>\n      {board}\n      {hiddenBoard}\n    </Box>\n  )\n}\n\nexport default Board\n","import { ReactElement, FC } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\n// interfaces\nimport AlertContent from '../../shared/interfaces/AlertProps.interface'\n\ninterface AlertDialogProps {\n  content: AlertContent\n  setContent: (content: AlertContent | null) => void\n}\n\nconst AlertDialog: FC<AlertDialogProps> = ({\n  content,\n  setContent,\n}): ReactElement => {\n  const handleAlternative1 = () => {\n    if (content.alternative1Function !== undefined) {\n      content.alternative1Function()\n    }\n    setContent(null)\n  }\n  const handleAlternative2 = () => {\n    if (content.alternative2Function !== undefined) {\n      content.alternative2Function()\n    }\n    setContent(null)\n  }\n\n  let dialogContent = null\n  if (content.description !== undefined) {\n    dialogContent = (\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content.description}\n        </DialogContentText>\n      </DialogContent>\n    )\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={true}\n        onClose={handleAlternative1}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{content.title}</DialogTitle>\n        {dialogContent}\n        <DialogActions>\n          <Button onClick={handleAlternative1} color=\"secondary\">\n            {content.alternative1}\n          </Button>\n          {content.alternative2 !== undefined && (\n            <Button onClick={handleAlternative2} color=\"secondary\" autoFocus>\n              {content.alternative2}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default AlertDialog\n","// Interfaces\nimport TilePosition from '../shared/interfaces/TilePosition.interface'\n\n// Types\ntype ShuffleDirection = 'horizontal' | 'vertical'\n\n// Global constants\nconst SHUFFLE_QUALITY = 4\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Calculate the position of the empty square\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const getEmptySquarePosition = (newBoardConfig: any[]): TilePosition => {\n  let emptySquarePosition: TilePosition = { row: 0, column: 0 }\n  for (let i = 0; i < newBoardConfig.length; i++) {\n    const row = newBoardConfig[i]\n    for (let j = 0; j < row.length; j++) {\n      const value = row[j]\n      if (value === null) {\n        emptySquarePosition = { row: i, column: j }\n      }\n    }\n  }\n\n  return emptySquarePosition\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Function to move one or several tiles left, right, up or down.\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const moveTiles = (\n  clickPosition: TilePosition,\n  newBoardConfig: any[]\n): any[] => {\n  // Get position of the empty square\n  let emptySquarePosition = getEmptySquarePosition(newBoardConfig)\n\n  // If the tile is on the same row as the empty square we need to move horizontally.\n  if (clickPosition.row === emptySquarePosition.row) {\n    // Determine if we clicked to the left or to the right of the empty square and move in\n    // correct direction.\n    if (clickPosition.column < emptySquarePosition.column) {\n      let tileToMove: TilePosition = {\n        row: clickPosition.row,\n        column: emptySquarePosition.column - 1,\n      }\n\n      while (tileToMove.column >= clickPosition.column) {\n        newBoardConfig[emptySquarePosition.row][emptySquarePosition.column] =\n          newBoardConfig[tileToMove.row][tileToMove.column]\n\n        tileToMove.column = tileToMove.column - 1\n        emptySquarePosition = {\n          row: emptySquarePosition.row,\n          column: emptySquarePosition.column - 1,\n        }\n      }\n    } else {\n      let tileToMove: TilePosition = {\n        row: clickPosition.row,\n        column: emptySquarePosition.column + 1,\n      }\n\n      while (tileToMove.column <= clickPosition.column) {\n        newBoardConfig[emptySquarePosition.row][emptySquarePosition.column] =\n          newBoardConfig[tileToMove.row][tileToMove.column]\n\n        tileToMove.column = tileToMove.column + 1\n        emptySquarePosition = {\n          row: emptySquarePosition.row,\n          column: emptySquarePosition.column + 1,\n        }\n      }\n    }\n\n    // If the tile is on the same column as the emptly square we need to move vertically.\n  } else if (clickPosition.column === emptySquarePosition.column) {\n    // Determine if we clicked over or under the empty square and move in correct direction.\n    if (clickPosition.row < emptySquarePosition.row) {\n      let tileToMove: TilePosition = {\n        row: emptySquarePosition.row - 1,\n        column: clickPosition.column,\n      }\n\n      while (tileToMove.row >= clickPosition.row) {\n        newBoardConfig[emptySquarePosition.row][emptySquarePosition.column] =\n          newBoardConfig[tileToMove.row][tileToMove.column]\n\n        tileToMove.row = tileToMove.row - 1\n        emptySquarePosition = {\n          row: emptySquarePosition.row - 1,\n          column: emptySquarePosition.column,\n        }\n      }\n    } else {\n      let tileToMove: TilePosition = {\n        row: emptySquarePosition.row + 1,\n        column: clickPosition.column,\n      }\n\n      while (tileToMove.row <= clickPosition.row) {\n        newBoardConfig[emptySquarePosition.row][emptySquarePosition.column] =\n          newBoardConfig[tileToMove.row][tileToMove.column]\n\n        tileToMove.row = tileToMove.row + 1\n        emptySquarePosition = {\n          row: emptySquarePosition.row + 1,\n          column: emptySquarePosition.column,\n        }\n      }\n    }\n  }\n\n  newBoardConfig[emptySquarePosition.row][emptySquarePosition.column] = null\n  return newBoardConfig\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n// This function shuffles the tiles around by making an amount of \"virtual mouseclicks\" on valid\n// tiles.\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const shuffleTiles = (newBoardConfig: any[]): any[] => {\n  let nrOfRows = newBoardConfig.length\n  let nrOfColumns = newBoardConfig[0].length\n\n  // This variable represents a \"virtual\" click position that is generated for each shuffle iteration.\n  let clickPosition: TilePosition = { row: 0, column: 0 }\n\n  // Randomize whether to start moving tiles horizontally or vertically.\n  let shuffleDirection: ShuffleDirection\n  Math.random() < 0.5\n    ? (shuffleDirection = 'horizontal')\n    : (shuffleDirection = 'vertical')\n\n  // Calculate how many times to shuffle based on the board size.\n  const timesToShuffle = nrOfRows * nrOfColumns * SHUFFLE_QUALITY\n\n  for (let i = 0; i < timesToShuffle; i++) {\n    // Get position of the empty square\n    let emptySquarePosition = getEmptySquarePosition(newBoardConfig)\n\n    // Alternate horizontally and vertically and move a randomized amount of tiles.\n    if (shuffleDirection === 'horizontal') {\n      // Now we need to pick a random tile on the row with the empty square. We do this by\n      // randomizing columns until we find one that doesn't include the empty square.\n      let foundValidColumn = false\n      let columnOfTileToMove = 0\n      while (!foundValidColumn) {\n        let randomColumn = Math.round(Math.random() * (nrOfColumns - 1))\n        if (!(randomColumn === emptySquarePosition.column)) {\n          columnOfTileToMove = randomColumn\n          foundValidColumn = true\n        }\n      }\n\n      // Generate a position on the board to make a \"virtual\" click.\n      clickPosition = {\n        row: emptySquarePosition.row,\n        column: columnOfTileToMove,\n      }\n\n      // Change direction of tile movement for next round\n      shuffleDirection = 'vertical'\n    } else if (shuffleDirection === 'vertical') {\n      let foundValidRow = false\n      let rowOfTileToMove = 0\n      while (!foundValidRow) {\n        let randomRow = Math.round(Math.random() * (nrOfRows - 1))\n        if (!(randomRow === emptySquarePosition.row)) {\n          rowOfTileToMove = randomRow\n          foundValidRow = true\n        }\n      }\n\n      clickPosition = {\n        row: rowOfTileToMove,\n        column: emptySquarePosition.column,\n      }\n      shuffleDirection = 'horizontal'\n    }\n    // Move the tiles and get the updated board config + empty square position\n    newBoardConfig = moveTiles(clickPosition, newBoardConfig)\n  }\n\n  return newBoardConfig\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n// This function will be called whenever the page reloads or the user changes board size.\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const initiateBoard = (\n  newNrOfRows: number,\n  newNrOfColumns: number\n): any[] => {\n  // Initiate the board.\n  let initialBoardConfig: any[] = []\n\n  for (let i = 0; i < newNrOfRows; i++) {\n    initialBoardConfig.push([])\n    for (let j = 0; j < newNrOfColumns; j++) {\n      // When we reach the last position set it to null so that it becomes an empty\n      // square allowing us to move around the pieces.\n      if (i === newNrOfRows - 1 && j === newNrOfColumns - 1) {\n        initialBoardConfig[i].push(null)\n      } else {\n        initialBoardConfig[i].push(i * newNrOfColumns + j + 1)\n      }\n    }\n  }\n\n  // Shuffle the tiles.\n  const newBoardConfig: any[] = shuffleTiles(initialBoardConfig)\n\n  return newBoardConfig\n}\n","import React, { useState } from 'react'\n\nimport {\n  makeStyles,\n  createStyles,\n  Theme,\n  createTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles'\nimport { CssBaseline } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport Typography from '@material-ui/core/Typography'\n\n// Components\nimport Board from './components/Board/Board'\nimport AlertDialog from './components/UI/AlertDialog'\n\n// Utilitary functions\nimport {\n  getEmptySquarePosition,\n  moveTiles,\n  shuffleTiles,\n  initiateBoard,\n} from './utils/gameLogic'\n\n// Interfaces\nimport TilePosition from './shared/interfaces/TilePosition.interface'\nimport AlertProps from './shared/interfaces/AlertProps.interface'\n\n// Create a dark theme.\nconst darkTheme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    fontFamily: `\"Open Sans\", sans-serif`,\n  },\n})\n\n// Define css-in-js.\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minWidth: 320,\n      width: '100vw',\n      height: '100vh',\n      padding: 20,\n      background: '#333',\n    },\n    contentContainer: {\n      width: '100vw',\n      height: 5304,\n\n      [`${theme.breakpoints.up('md')}`]: {\n        width: 594,\n        height: 314,\n      },\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\n        width: 540,\n        height: 314,\n      },\n    },\n    levelBox: {\n      justifyContent: 'center',\n      display: 'flex',\n      marginBottom: 40,\n\n      [`${theme.breakpoints.up('md')}`]: {\n        justifyContent: 'flex-start',\n      },\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\n        justifyContent: 'flex-start',\n      },\n    },\n    panelAndBoardContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'column',\n\n      [`${theme.breakpoints.up('md')}`]: {\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        justifyContent: 'space-between',\n      },\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        justifyContent: 'space-between',\n      },\n    },\n    controlPanel: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n\n      [`${theme.breakpoints.up('md')}`]: {\n        alignItems: 'flex-start',\n        marginRight: 50,\n      },\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\n        alignItems: 'flex-start',\n        marginRight: 20,\n      },\n    },\n    shuffleButton: {\n      marginTop: 20,\n      marginBottom: 40,\n\n      // There is a bug in Material UI causing buttons to become transparent after clicking them\n      // on mobile devices. Below code makes sure we have control over the colors.\n      backgroundColor: '#4a4a4a',\n      '&:hover': {\n        backgroundColor: '#4a4a4a',\n      },\n      '@media (hover: hover)': {\n        '&:hover': {\n          backgroundColor: '#0000000a',\n        },\n      },\n    },\n    nrOfRowsOrColumnsBox: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      width: 272,\n      marginBottom: 20,\n\n      [`${theme.breakpoints.down('sm')} and (orientation: landscape)`]: {\n        width: 232,\n      },\n    },\n    nrOfRowsOrColumnsText: {\n      display: 'flex',\n      alignItems: 'center',\n      borderRadius: 8,\n      padding: 5,\n      fontSize: 16,\n      margin: '0 10px 0 10px',\n      userSelect: 'none',\n    },\n    increaseOrDecreaseButton: {\n      backgroundColor: '#4a4a4a',\n      '&:hover': {\n        backgroundColor: '#4a4a4a',\n      },\n      '@media (hover: hover)': {\n        '&:hover': {\n          backgroundColor: '#0000000a',\n        },\n      },\n    },\n    // The following 2 keys constitutes a \"hack\" to take control over the background color of\n    // disabled buttons in Material UI. Here we don't want them to get a transparent background\n    // but instead stay colored grey.\n    rootButton: {\n      '&$disabled': {\n        backgroundColor: '#4a4a4a',\n      },\n    },\n    disabled: {},\n    boardBox: {\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    typography: {\n      userSelect: 'none',\n    },\n  })\n)\n\n// Global constants\nconst INITIAL_NR_OF_ROWS = 2\nconst INITIAL_NR_OF_COLUMNS = 2\nconst MIN_NR_OF_ROWS = 2\nconst MAX_NR_OF_ROWS = 4\nconst MIN_NR_OF_COLUMNS = 2\nconst MAX_NR_OF_COLUMNS = 4\n\nfunction App() {\n  const classes = useStyles()\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Set up the state.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const [boardConfig, setBoardConfig] = useState<any[]>(() =>\n    initiateBoard(INITIAL_NR_OF_ROWS, INITIAL_NR_OF_COLUMNS)\n  )\n  const [currentLevel, setCurrentLevel] = useState<number>(1)\n  const [alertProps, setAlertProps] = useState<AlertProps | null>(null)\n  const [hasMadeFirstMove, setHasMadeFirstMove] = useState<boolean>(false)\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // This handler is activated when the user clicks on a tile that lines up either horizonally or\n  // vertically with the empty square.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleClickTile = (clickPosition: TilePosition) => {\n    //Make sure the user clicked on a valid tile\n    let emptySquarePosition = getEmptySquarePosition([...boardConfig])\n    if (\n      clickPosition.row === emptySquarePosition.row ||\n      clickPosition.column === emptySquarePosition.column\n    ) {\n      // Move the tiles and get the updated board config + empty square position\n      let newBoardConfig: any[] = moveTiles(clickPosition, [...boardConfig])\n      // If this is the first move of the game then set a flag in order to make sure we warn before\n      // resetting the board again.\n      !hasMadeFirstMove && setHasMadeFirstMove(true)\n      // Check if the user has managed to put the tiles in the right order.\n      let correctOrder = true\n      for (let i = 0; i < nrOfRows && correctOrder; i++) {\n        for (let j = 0; j < nrOfColumns && correctOrder; j++) {\n          // Don't check the last square for a value since it's supposed to be empty.\n          if (\n            newBoardConfig[i][j] !== i * nrOfColumns + j + 1 &&\n            !(i === nrOfRows - 1 && j === nrOfColumns - 1)\n          ) {\n            correctOrder = false\n          }\n        }\n      }\n      if (correctOrder) {\n        let nrOfRows = newBoardConfig.length\n        let nrOfColumns = newBoardConfig[0].length\n\n        // Check if this was the last level.\n        if (currentLevel === MAX_NR_OF_COLUMNS + MAX_NR_OF_ROWS - 3) {\n          setAlertProps({\n            title: 'Congratulations!',\n            description: 'You have finished the last level. Great job!!',\n            alternative2: 'Ok',\n          })\n        } else {\n          setAlertProps({\n            title: 'Congratulations!',\n            description: `You finished level ${currentLevel}. Advancing to level ${\n              currentLevel + 1\n            }.`,\n            alternative2: 'Ok',\n            alternative2Function: () => {\n              // Go to the next level by adding either a row or a column depending on which is the most scarce\n              // at the moment.\n              if (nrOfColumns <= nrOfRows) {\n                newBoardConfig = initiateBoard(nrOfRows, nrOfColumns + 1)\n              } else {\n                newBoardConfig = initiateBoard(nrOfRows + 1, nrOfColumns)\n              }\n              setCurrentLevel(currentLevel + 1)\n              setBoardConfig(newBoardConfig)\n            },\n          })\n        }\n      }\n\n      setBoardConfig(newBoardConfig)\n    }\n  }\n\n  const displayWarning = (functionToRunOnAffirmation: () => void) => {\n    setAlertProps({\n      title: 'Are you sure?',\n      description: 'This will quit your current game.',\n      alternative1: 'Cancel',\n      alternative2: 'OK',\n      alternative2Function: () => {\n        functionToRunOnAffirmation()\n        setHasMadeFirstMove(false)\n      },\n    })\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  // A few handlers for button clicks. We always check if the user has made a first move and if so we\n  // give a warning before resetting the board.\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleClickShuffle = () => {\n    hasMadeFirstMove\n      ? displayWarning(() => setBoardConfig(shuffleTiles([...boardConfig])))\n      : setBoardConfig(shuffleTiles([...boardConfig]))\n  }\n\n  const handleDecreaseNrOfRows = () => {\n    let nrOfRows = boardConfig.length\n    let nrOfColumns = boardConfig[0].length\n\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setCurrentLevel(currentLevel - 1)\n        const newBoardConfig = initiateBoard(nrOfRows - 1, nrOfColumns)\n        setBoardConfig(newBoardConfig)\n      })\n    } else {\n      setCurrentLevel(currentLevel - 1)\n      const newBoardConfig = initiateBoard(nrOfRows - 1, nrOfColumns)\n      setBoardConfig(newBoardConfig)\n    }\n  }\n  const handleIncreaseNrOfRows = () => {\n    let nrOfRows = boardConfig.length\n    let nrOfColumns = boardConfig[0].length\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setCurrentLevel(currentLevel + 1)\n        const newBoardConfig = initiateBoard(nrOfRows + 1, nrOfColumns)\n        setBoardConfig(newBoardConfig)\n      })\n    } else {\n      setCurrentLevel(currentLevel + 1)\n      const newBoardConfig = initiateBoard(nrOfRows + 1, nrOfColumns)\n      setBoardConfig(newBoardConfig)\n    }\n  }\n  const handleDecreaseNrOfColumns = () => {\n    let nrOfRows = boardConfig.length\n    let nrOfColumns = boardConfig[0].length\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setCurrentLevel(currentLevel - 1)\n        const newBoardConfig = initiateBoard(nrOfRows, nrOfColumns - 1)\n        setBoardConfig(newBoardConfig)\n      })\n    } else {\n      setCurrentLevel(currentLevel - 1)\n      const newBoardConfig = initiateBoard(nrOfRows, nrOfColumns - 1)\n      setBoardConfig(newBoardConfig)\n    }\n  }\n  const handleIncreaseNrOfColumns = () => {\n    let nrOfRows = boardConfig.length\n    let nrOfColumns = boardConfig[0].length\n    if (hasMadeFirstMove) {\n      displayWarning(() => {\n        setCurrentLevel(currentLevel + 1)\n        const newBoardConfig = initiateBoard(nrOfRows, nrOfColumns + 1)\n        setBoardConfig(newBoardConfig)\n      })\n    } else {\n      setCurrentLevel(currentLevel + 1)\n      const newBoardConfig = initiateBoard(nrOfRows, nrOfColumns + 1)\n      setBoardConfig(newBoardConfig)\n    }\n  }\n\n  let nrOfRows = boardConfig.length\n  let nrOfColumns = boardConfig[0].length\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n\n      <Box className={classes.root}>\n        <Box className={classes.contentContainer}>\n          <Box className={classes.levelBox}>\n            <Typography\n              className={classes.typography}\n              display=\"block\"\n              variant=\"h4\"\n              color=\"secondary\"\n            >\n              {'Level ' + currentLevel}\n            </Typography>\n          </Box>\n\n          <Box className={classes.panelAndBoardContainer}>\n            <Box className={classes.controlPanel}>\n              <Box className={classes.nrOfRowsOrColumnsBox}>\n                <Typography\n                  className={classes.typography}\n                  display=\"block\"\n                  variant=\"body1\"\n                  style={{ width: '120px' }}\n                >\n                  {'Rows:'}\n                </Typography>\n                <IconButton\n                  className={classes.increaseOrDecreaseButton}\n                  classes={{\n                    root: classes.rootButton,\n                    disabled: classes.disabled,\n                  }}\n                  aria-label=\"subtract\"\n                  disabled={nrOfRows === MIN_NR_OF_ROWS ? true : false}\n                  onClick={handleDecreaseNrOfRows}\n                >\n                  <RemoveIcon />\n                </IconButton>\n                <span className={classes.nrOfRowsOrColumnsText}>\n                  {nrOfRows}\n                </span>\n                <IconButton\n                  className={classes.increaseOrDecreaseButton}\n                  classes={{\n                    root: classes.rootButton,\n                    disabled: classes.disabled,\n                  }}\n                  aria-label=\"add\"\n                  disabled={nrOfRows === MAX_NR_OF_ROWS ? true : false}\n                  onClick={handleIncreaseNrOfRows}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Box>\n              <Box className={classes.nrOfRowsOrColumnsBox}>\n                <Typography\n                  className={classes.typography}\n                  display=\"block\"\n                  variant=\"body1\"\n                  style={{ width: '120px' }}\n                >\n                  {'Columns:'}\n                </Typography>\n                <IconButton\n                  className={classes.increaseOrDecreaseButton}\n                  classes={{\n                    root: classes.rootButton,\n                    disabled: classes.disabled,\n                  }}\n                  aria-label=\"subtract\"\n                  disabled={nrOfColumns === MIN_NR_OF_COLUMNS ? true : false}\n                  onClick={handleDecreaseNrOfColumns}\n                >\n                  <RemoveIcon />\n                </IconButton>\n                <span className={classes.nrOfRowsOrColumnsText}>\n                  {nrOfColumns}\n                </span>\n                <IconButton\n                  className={classes.increaseOrDecreaseButton}\n                  classes={{\n                    root: classes.rootButton,\n                    disabled: classes.disabled,\n                  }}\n                  aria-label=\"add\"\n                  disabled={nrOfColumns === MAX_NR_OF_COLUMNS ? true : false}\n                  onClick={handleIncreaseNrOfColumns}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Box>\n              <Button\n                className={classes.shuffleButton}\n                onClick={() => handleClickShuffle()}\n              >\n                shuffle\n              </Button>\n            </Box>\n            <Box className={classes.boardBox}>\n              <Board\n                boardConfig={boardConfig}\n                handleClickTile={(position: TilePosition) =>\n                  handleClickTile(position)\n                }\n              />\n            </Box>\n          </Box>\n          {alertProps !== null && (\n            <AlertDialog content={alertProps} setContent={setAlertProps} />\n          )}\n        </Box>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}