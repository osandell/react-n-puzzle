{"version":3,"sources":["components/Board/Tile/Tile.tsx","components/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","props","width","height","margin","background","visibility","value","Tile","classes","className","onClick","position","display","flexDirection","Board","boardConfig","handleClickTile","board","i","length","row","rowTiles","j","push","column","Box","justifyContent","alignItems","minWidth","padding","App","useState","setBoardConfig","nrOfRows","nrOfColumns","emptySquarePosition","setEmptySquarePosition","useEffect","newBoardConfig","CssBaseline","clickPosition","newEmptySquarePosition","tileToMove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8371a054.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\n// Interfaces\nimport TilePosition from '../../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  position: TilePosition\n  value: number\n  onClick: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles<Theme, Props>((theme: Theme) =>\n  createStyles({\n    root: (props) => ({\n      width: 100,\n      height: 100,\n      margin: 5,\n      background: 'white',\n      // We always have one button with value === null that represents the empty square,\n      // that's why we hide it.\n      visibility: `${props.value === null ? 'hidden' : 'visible'}`,\n    }),\n  })\n)\n\nconst Tile: FC<Props> = (props): ReactElement => {\n  const classes = useStyles(props)\n\n  return (\n    <button\n      className={classes.root}\n      onClick={() => props.onClick(props.position)}\n    >\n      {/* We need some placeholder string even on the hidden button to keep the right dimensions. */}\n      {props.value === null ? '\\u00A0' : props.value}\n    </button>\n  )\n}\n\nexport default Tile\n","import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\n// Components\nimport Tile from './Tile/Tile'\n\n// Interfaces\nimport TilePosition from '../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  boardConfig: any[]\n  handleClickTile: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      background: 'orange',\n    },\n  })\n)\n\nconst Board: FC<Props> = ({ boardConfig, handleClickTile }): ReactElement => {\n  const classes = useStyles()\n\n  // loop through every row of the board configuration and generate a box with tiles for each\n  let board = []\n  for (let i = 0; i < boardConfig.length; i++) {\n    const row = boardConfig[i]\n\n    let rowTiles = []\n    for (let j = 0; j < row.length; j++) {\n      rowTiles.push(\n        <Tile\n          key={j}\n          position={{ row: i, column: j }}\n          value={row[j]}\n          onClick={(position: TilePosition) => handleClickTile(position)}\n        />\n      )\n    }\n\n    board.push(<Box key={i}>{rowTiles}</Box>)\n  }\n\n  return (\n    <Box data-testid=\"board\" className={classes.root}>\n      {board}\n    </Box>\n  )\n}\n\nexport default Board\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { CssBaseline } from '@material-ui/core'\n\n// Components\nimport Board from './components/Board/Board'\n\n// Interfaces\nimport TilePosition from './shared/interfaces/TilePosition.interface'\n\n// Define css-in-js.\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minWidth: 320,\n      width: '100vw',\n      height: '100vh',\n      padding: 20,\n      background: 'lightGrey',\n    },\n  })\n)\n\nfunction App() {\n  const classes = useStyles()\n\n  const nrOfRows = 4\n  const nrOfColumns = 4\n\n  const [boardConfig, setBoardConfig] = useState<any[]>([])\n  const [emptySquarePosition, setEmptySquarePosition] = useState<TilePosition>({\n    row: nrOfRows - 1,\n    column: nrOfColumns - 1,\n  })\n\n  useEffect(() => {\n    // Generate an initial board configuration by looping through all the coordinates of the\n    // board and generate the appropriate value.\n    let newBoardConfig: any[] = []\n\n    for (let i = 0; i < nrOfRows; i++) {\n      newBoardConfig.push([])\n      for (let j = 0; j < nrOfColumns; j++) {\n        // When we reach the last position we leave it without a value so that it becomes an empty\n        // square allowing us to move around the pieces.\n        if (i === nrOfRows - 1 && j === nrOfColumns - 1) {\n          newBoardConfig[i].push(null)\n        } else {\n          newBoardConfig[i].push(i * nrOfColumns + j + 1)\n        }\n      }\n    }\n\n    setBoardConfig(newBoardConfig)\n  }, [setBoardConfig, nrOfRows, nrOfColumns])\n\n  const handleClickTile = (clickPosition: TilePosition) => {\n    // If a tile on the same row as the empty square is clicked we need to move horizontally.\n    if (clickPosition.row === emptySquarePosition.row) {\n      let newBoardConfig: any[] = [...boardConfig]\n      let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n      // Determine if we clicked to the left or to the right of the empty square and move in\n      // correct direction.\n      if (clickPosition.column < newEmptySquarePosition.column) {\n        let tileToMove: TilePosition = {\n          row: clickPosition.row,\n          column: newEmptySquarePosition.column - 1,\n        }\n\n        while (tileToMove.column >= clickPosition.column) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.column = tileToMove.column - 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row,\n            column: newEmptySquarePosition.column - 1,\n          }\n        }\n      } else {\n        let tileToMove: TilePosition = {\n          row: clickPosition.row,\n          column: newEmptySquarePosition.column + 1,\n        }\n\n        while (tileToMove.column <= clickPosition.column) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.column = tileToMove.column + 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row,\n            column: newEmptySquarePosition.column + 1,\n          }\n        }\n      }\n\n      newBoardConfig[newEmptySquarePosition.row][\n        newEmptySquarePosition.column\n      ] = null\n      setBoardConfig(newBoardConfig)\n      setEmptySquarePosition(newEmptySquarePosition)\n\n      // If a tile on the same column as the empty square is clicked we need to move vertically.\n    } else if (clickPosition.column === emptySquarePosition.column) {\n      let newBoardConfig: any[] = [...boardConfig]\n      let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n      // Determine if we clicked over or under the empty square and move in correct direction.\n      if (clickPosition.row < newEmptySquarePosition.row) {\n        let tileToMove: TilePosition = {\n          row: newEmptySquarePosition.row - 1,\n          column: clickPosition.column,\n        }\n\n        while (tileToMove.row >= clickPosition.row) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.row = tileToMove.row - 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row - 1,\n            column: newEmptySquarePosition.column,\n          }\n        }\n      } else {\n        let tileToMove: TilePosition = {\n          row: newEmptySquarePosition.row + 1,\n          column: clickPosition.column,\n        }\n\n        while (tileToMove.row <= clickPosition.row) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.row = tileToMove.row + 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row + 1,\n            column: newEmptySquarePosition.column,\n          }\n        }\n      }\n\n      newBoardConfig[newEmptySquarePosition.row][\n        newEmptySquarePosition.column\n      ] = null\n      setBoardConfig(newBoardConfig)\n      setEmptySquarePosition(newEmptySquarePosition)\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Board\n        boardConfig={boardConfig}\n        handleClickTile={(position: TilePosition) => handleClickTile(position)}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}