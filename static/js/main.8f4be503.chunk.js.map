{"version":3,"sources":["components/Board/Tile/Tile.tsx","components/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","props","width","height","margin","background","visibility","value","Tile","classes","className","onClick","position","display","flexDirection","Board","boardConfig","handleClickTile","board","i","length","row","rowTiles","j","push","column","Box","darkTheme","createTheme","palette","type","justifyContent","alignItems","minWidth","padding","controlPanel","marginRight","newGameButton","marginTop","backgroundColor","nrOfRowsOrColumnsBox","marginBottom","nrOfRowsOrColumnsText","borderRadius","fontSize","increaseOrDecreaseButton","boardBox","App","useState","nrOfRows","setNrOfRows","nrOfColumns","setNrOfColumns","setBoardConfig","emptySquarePosition","setEmptySquarePosition","useEffect","newBoardConfig","ThemeProvider","CssBaseline","Typography","variant","style","IconButton","disabled","Button","clickPosition","shuffleDirection","newEmptySquarePosition","Math","random","timesToShuffle","foundValidColumn","columnOfTileToMove","randomColumn","round","tileToMove","foundValidRow","rowOfTileToMove","randomRow","handleShuffle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f4be503.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\n// Interfaces\nimport TilePosition from '../../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  position: TilePosition\n  value: number\n  onClick: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles<Theme, Props>((theme: Theme) =>\n  createStyles({\n    root: (props) => ({\n      width: 100,\n      height: 100,\n      margin: 5,\n      background: 'white',\n      // We always have one button with value === null that represents the empty square,\n      // that's why we hide it.\n      visibility: `${props.value === null ? 'hidden' : 'visible'}`,\n    }),\n  })\n)\n\nconst Tile: FC<Props> = (props): ReactElement => {\n  const classes = useStyles(props)\n\n  return (\n    <button\n      className={classes.root}\n      onClick={() => props.onClick(props.position)}\n    >\n      {/* We need some placeholder string even on the hidden button to keep the right dimensions. */}\n      {props.value === null ? '\\u00A0' : props.value}\n    </button>\n  )\n}\n\nexport default Tile\n","import React, { FC, ReactElement } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\n// Components\nimport Tile from './Tile/Tile'\n\n// Interfaces\nimport TilePosition from '../../shared/interfaces/TilePosition.interface'\ninterface Props {\n  boardConfig: any[]\n  handleClickTile: (position: TilePosition) => void\n}\n\n// Define css-in-js\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'inline-flex',\n      flexDirection: 'column',\n      background: 'orange',\n    },\n  })\n)\n\nconst Board: FC<Props> = ({ boardConfig, handleClickTile }): ReactElement => {\n  const classes = useStyles()\n\n  // loop through every row of the board configuration and generate a box with tiles for each\n  let board = []\n  for (let i = 0; i < boardConfig.length; i++) {\n    const row = boardConfig[i]\n\n    let rowTiles = []\n    for (let j = 0; j < row.length; j++) {\n      rowTiles.push(\n        <Tile\n          key={j}\n          position={{ row: i, column: j }}\n          value={row[j]}\n          onClick={(position: TilePosition) => handleClickTile(position)}\n        />\n      )\n    }\n\n    board.push(<Box key={i}>{rowTiles}</Box>)\n  }\n\n  return (\n    <Box data-testid=\"board\" className={classes.root}>\n      {board}\n    </Box>\n  )\n}\n\nexport default Board\n","import React, { useState, useEffect } from 'react'\nimport {\n  makeStyles,\n  createStyles,\n  Theme,\n  createTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles'\nimport { CssBaseline } from '@material-ui/core'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport Typography from '@material-ui/core/Typography'\n\n// Components\nimport Board from './components/Board/Board'\n\n// Interfaces\nimport TilePosition from './shared/interfaces/TilePosition.interface'\n\n// Types\ntype ShuffleDirection = 'horizontal' | 'vertical'\n\n// Create a dark theme.\nconst darkTheme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n})\n\n// Define css-in-js.\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minWidth: 320,\n      width: '100vw',\n      height: '100vh',\n      padding: 20,\n      background: '#333',\n    },\n    controlPanel: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginRight: 50,\n    },\n    newGameButton: {\n      marginTop: 60,\n      backgroundColor: '#4a4a4a',\n    },\n    nrOfRowsOrColumnsBox: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      marginBottom: 20,\n    },\n    nrOfRowsOrColumnsText: {\n      display: 'flex',\n      alignItems: 'center',\n      borderRadius: 8,\n      padding: 5,\n      fontSize: 16,\n      margin: '0 10px 0 10px',\n    },\n    increaseOrDecreaseButton: {\n      backgroundColor: '#4a4a4a',\n    },\n    boardBox: {\n      display: 'flex',\n      justifyContent: 'center',\n      width: 600,\n    },\n  })\n)\n\nfunction App() {\n  const classes = useStyles()\n\n  const [nrOfRows, setNrOfRows] = useState<number>(3)\n  const [nrOfColumns, setNrOfColumns] = useState<number>(3)\n\n  const [boardConfig, setBoardConfig] = useState<any[]>([])\n  const [emptySquarePosition, setEmptySquarePosition] = useState<TilePosition>({\n    row: nrOfRows - 1,\n    column: nrOfColumns - 1,\n  })\n\n  // Generate an initial board configuration by looping through all the positions of the\n  // board and generate the appropriate value.\n  useEffect(() => {\n    let newBoardConfig: any[] = []\n\n    for (let i = 0; i < nrOfRows; i++) {\n      newBoardConfig.push([])\n      for (let j = 0; j < nrOfColumns; j++) {\n        // When we reach the last position we leave it without a value so that it becomes an empty\n        // square allowing us to move around the pieces.\n        if (i === nrOfRows - 1 && j === nrOfColumns - 1) {\n          newBoardConfig[i].push(null)\n        } else {\n          newBoardConfig[i].push(i * nrOfColumns + j + 1)\n        }\n      }\n    }\n\n    // Store the position of the empty square so we don't need to recalculate it every time\n    setEmptySquarePosition({ row: nrOfRows - 1, column: nrOfColumns - 1 })\n\n    setBoardConfig(newBoardConfig)\n  }, [setBoardConfig, nrOfRows, nrOfColumns])\n\n  const handleClickTile = (clickPosition: TilePosition) => {\n    // If the tile is on the same row as the empty square we need to move horizontally.\n    if (clickPosition.row === emptySquarePosition.row) {\n      let newBoardConfig: any[] = [...boardConfig]\n      let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n      // Determine if we clicked to the left or to the right of the empty square and move in\n      // correct direction.\n      if (clickPosition.column < newEmptySquarePosition.column) {\n        let tileToMove: TilePosition = {\n          row: clickPosition.row,\n          column: newEmptySquarePosition.column - 1,\n        }\n\n        while (tileToMove.column >= clickPosition.column) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.column = tileToMove.column - 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row,\n            column: newEmptySquarePosition.column - 1,\n          }\n        }\n      } else {\n        let tileToMove: TilePosition = {\n          row: clickPosition.row,\n          column: newEmptySquarePosition.column + 1,\n        }\n\n        while (tileToMove.column <= clickPosition.column) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.column = tileToMove.column + 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row,\n            column: newEmptySquarePosition.column + 1,\n          }\n        }\n      }\n\n      newBoardConfig[newEmptySquarePosition.row][\n        newEmptySquarePosition.column\n      ] = null\n      setBoardConfig(newBoardConfig)\n      setEmptySquarePosition(newEmptySquarePosition)\n\n      // If the tile is on the same column as the emptly square we need to move vertically.\n    } else if (clickPosition.column === emptySquarePosition.column) {\n      let newBoardConfig: any[] = [...boardConfig]\n      let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n      // Determine if we clicked over or under the empty square and move in correct direction.\n      if (clickPosition.row < newEmptySquarePosition.row) {\n        let tileToMove: TilePosition = {\n          row: newEmptySquarePosition.row - 1,\n          column: clickPosition.column,\n        }\n\n        while (tileToMove.row >= clickPosition.row) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.row = tileToMove.row - 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row - 1,\n            column: newEmptySquarePosition.column,\n          }\n        }\n      } else {\n        let tileToMove: TilePosition = {\n          row: newEmptySquarePosition.row + 1,\n          column: clickPosition.column,\n        }\n\n        while (tileToMove.row <= clickPosition.row) {\n          newBoardConfig[newEmptySquarePosition.row][\n            newEmptySquarePosition.column\n          ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n          tileToMove.row = tileToMove.row + 1\n          newEmptySquarePosition = {\n            row: newEmptySquarePosition.row + 1,\n            column: newEmptySquarePosition.column,\n          }\n        }\n      }\n\n      newBoardConfig[newEmptySquarePosition.row][\n        newEmptySquarePosition.column\n      ] = null\n      setBoardConfig(newBoardConfig)\n      setEmptySquarePosition(newEmptySquarePosition)\n    }\n  }\n\n  const handleShuffle = () => {\n    let newBoardConfig: any[] = [...boardConfig]\n    let newEmptySquarePosition: TilePosition = { ...emptySquarePosition }\n\n    // This variable represents a \"virtual\" click position that is generated for each shuffle iteration.\n    let clickPosition\n\n    // Randomize whether to start moving tiles horizontally or vertically.\n    let shuffleDirection: ShuffleDirection\n    Math.random() < 0.5\n      ? (shuffleDirection = 'horizontal')\n      : (shuffleDirection = 'vertical')\n\n    // Calculate how many times to shuffle based on the board size\n    const timesToShuffle = nrOfRows * nrOfColumns * 3\n\n    for (let i = 0; i < timesToShuffle; i++) {\n      // Alternate horizontally and vertically and move a randomized amount of tiles.\n      if (shuffleDirection === 'horizontal') {\n        // Now we need to pick a random tile on the row with the empty square. We do this by\n        // randomizing columns until we find one that doesn't include the empty square.\n        let foundValidColumn = false\n        let columnOfTileToMove = 0\n        while (!foundValidColumn) {\n          let randomColumn = Math.round(Math.random() * (nrOfColumns - 1))\n          if (!(randomColumn === newEmptySquarePosition.column)) {\n            columnOfTileToMove = randomColumn\n            foundValidColumn = true\n          }\n        }\n\n        // Generate a the position on the board to make a \"virtual\" click.\n        clickPosition = {\n          row: newEmptySquarePosition.row,\n          column: columnOfTileToMove,\n        }\n\n        // Determine if the tile to be moved is located to the left or to the right of the\n        // empty square and move in correct direction.\n        if (clickPosition.column < newEmptySquarePosition.column) {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column - 1,\n          }\n\n          while (tileToMove.column >= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column - 1,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: clickPosition.row,\n            column: newEmptySquarePosition.column + 1,\n          }\n\n          while (tileToMove.column <= clickPosition.column) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.column = tileToMove.column + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row,\n              column: newEmptySquarePosition.column + 1,\n            }\n          }\n        }\n\n        // Change direction of tile movement for next round\n        shuffleDirection = 'vertical'\n      } else if (shuffleDirection === 'vertical') {\n        let foundValidRow = false\n        let rowOfTileToMove = 0\n        while (!foundValidRow) {\n          let randomRow = Math.round(Math.random() * (nrOfRows - 1))\n          if (!(randomRow === newEmptySquarePosition.row)) {\n            rowOfTileToMove = randomRow\n            foundValidRow = true\n          }\n        }\n\n        clickPosition = {\n          row: rowOfTileToMove,\n          column: newEmptySquarePosition.column,\n        }\n\n        // Determine if the tile to be moved is located over or under the empty square\n        // and move in correct direction.\n        if (clickPosition.row < newEmptySquarePosition.row) {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row - 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row >= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row - 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row - 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        } else {\n          let tileToMove: TilePosition = {\n            row: newEmptySquarePosition.row + 1,\n            column: clickPosition.column,\n          }\n\n          while (tileToMove.row <= clickPosition.row) {\n            newBoardConfig[newEmptySquarePosition.row][\n              newEmptySquarePosition.column\n            ] = newBoardConfig[tileToMove.row][tileToMove.column]\n\n            tileToMove.row = tileToMove.row + 1\n            newEmptySquarePosition = {\n              row: newEmptySquarePosition.row + 1,\n              column: newEmptySquarePosition.column,\n            }\n          }\n        }\n\n        shuffleDirection = 'horizontal'\n      }\n    }\n    newBoardConfig[newEmptySquarePosition.row][newEmptySquarePosition.column] =\n      null\n    setBoardConfig(newBoardConfig)\n    setEmptySquarePosition(newEmptySquarePosition)\n  }\n\n  const handleDecreaseNrOfRows = () => {\n    setNrOfRows(nrOfRows - 1)\n  }\n  const handleIncreaseNrOfRows = () => {\n    setNrOfRows(nrOfRows + 1)\n  }\n  const handleDecreaseNrOfColumns = () => {\n    setNrOfColumns(nrOfColumns - 1)\n  }\n  const handleIncreaseNrOfColumns = () => {\n    setNrOfColumns(nrOfColumns + 1)\n  }\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <Box className={classes.controlPanel}>\n          <Box className={classes.nrOfRowsOrColumnsBox}>\n            <Typography\n              display=\"block\"\n              variant=\"body1\"\n              style={{ width: '80px' }}\n            >\n              {'Rows:'}\n            </Typography>\n            <IconButton\n              className={classes.increaseOrDecreaseButton}\n              aria-label=\"subtract\"\n              disabled={nrOfRows === 2 ? true : false}\n              onClick={handleDecreaseNrOfRows}\n            >\n              <RemoveIcon />\n            </IconButton>\n            <span className={classes.nrOfRowsOrColumnsText}>{nrOfRows}</span>\n            <IconButton\n              className={classes.increaseOrDecreaseButton}\n              aria-label=\"add\"\n              disabled={nrOfRows === 5 ? true : false}\n              onClick={handleIncreaseNrOfRows}\n            >\n              <AddIcon />\n            </IconButton>\n          </Box>\n          <Box className={classes.nrOfRowsOrColumnsBox}>\n            <Typography\n              display=\"block\"\n              variant=\"body1\"\n              style={{ width: '80px' }}\n            >\n              {'Columns:'}\n            </Typography>\n            <IconButton\n              className={classes.increaseOrDecreaseButton}\n              aria-label=\"subtract\"\n              disabled={nrOfColumns === 2 ? true : false}\n              onClick={handleDecreaseNrOfColumns}\n            >\n              <RemoveIcon />\n            </IconButton>\n            <span className={classes.nrOfRowsOrColumnsText}>{nrOfColumns}</span>\n            <IconButton\n              className={classes.increaseOrDecreaseButton}\n              aria-label=\"add\"\n              disabled={nrOfColumns === 5 ? true : false}\n              onClick={handleIncreaseNrOfColumns}\n            >\n              <AddIcon />\n            </IconButton>\n          </Box>\n          <Button\n            className={classes.newGameButton}\n            onClick={() => handleShuffle()}\n          >\n            shuffle\n          </Button>\n        </Box>\n        <Box className={classes.boardBox}>\n          <Board\n            boardConfig={boardConfig}\n            handleClickTile={(position: TilePosition) =>\n              handleClickTile(position)\n            }\n          />\n        </Box>\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}